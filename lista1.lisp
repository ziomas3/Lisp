(defvar z 1)
(defun zad (z) (format t "~%~%zadanie ~A ~%" z) (incf z)) 
(zad z) ;zad 1
(defun f (x) (expt x 4))
(setq x (read))
(print (f x))
(incf z)
(zad z) ;zad 2
(defun wiekszy (a b) (if (> a b) a b))
 (format t "Podaj pierwszy argument ~%")
(setq x1 (read))
 (format t "Podaj drugi argument ~%")
(setq x2 (read))
(print (wiekszy x1 x2))
(incf z)
(zad z) ;zad 3
(defun rozw (a b c) 
	(let ((delta (- (* b b) (* 4 a c))))
	(cond
		((> delta 0) (List (/ (+ (- b) (sqrt delta)) (* 2 a)) (/ (- (- b) (sqrt delta)) (* 2 a))))
		((< delta 0) "NIL")
		((= delta 0) (if (= b 0)  (if(= a 0) (if (= c 0) "T" )  )  (/ (- b) (* a 2)) ))
		
	)))
(format t "Podaj argument a ~%")
(setq a (read))
(format t "Podaj argument b ~%")
(setq b (read))
(format t "Podaj argument c ~%")
(setq c (read))
(print (rozw a b c))
(incf z)
(zad z) ;zad 4
(format t "Podaj numer dnia tygodnia ~%")
(setq n (read))
(defun dzien (n) 
	(cond
		((= n 1)  "Poniedzialek")
		((= n 2)  "Wtorek")
		((= n 3)  "Sroda")
		((= n 4)  "Czwartek")
		((= n 5)  "Piatek")
		((= n 6)  "Sobota")
		((= n 7)  "Niedziela")
	)
)
(print (dzien n))
(incf z)
(zad z) ;zad 5
(defun usun-liczby (L) (remove-if #'numberp L))
(print (usun-liczby '(4 x -4 y 2 z -2 t 3 -3)))
(defun usun-dodatnie (L) (remove-if (lambda (X) (if (eq (numberp X) t) (> X 0))L) L))
(print (usun-dodatnie '(4 x -4 y 2 z -2 t 3 -3))  )
